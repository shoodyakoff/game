# Базовый образ для рабочей среды и сборки
FROM node:18.19.1-alpine AS base

# Установка зависимостей для полноценной работы Node.js
RUN apk add --no-cache libc6-compat curl

# Этап установки зависимостей
FROM base AS deps
WORKDIR /app

# Копирование файлов package.json и package-lock.json
COPY package.json package-lock.json ./

# Установка зависимостей
RUN npm ci && \
    npm cache clean --force

# Этап сборки приложения
FROM base AS builder
WORKDIR /app

# Копирование установленных зависимостей
COPY --from=deps /app/node_modules ./node_modules

# Копирование исходного кода
COPY . .

# Настройка переменных среды для сборки
ENV NODE_ENV=production
ENV NEXT_PUBLIC_CLERK_MOCK_MODE=true
# Используем заведомо невалидный ключ для того, чтобы компонент понимал, что нужно использовать мок
ENV NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=mock_key_not_for_validation
ENV CLERK_SECRET_KEY=mock_secret_key_not_used

# Создаем временные заглушки для проблемных модулей Clerk
# 1. Заглушки для CJS модулей
RUN mkdir -p /app/node_modules/@clerk/nextjs/dist/cjs/server/ && \
    echo 'module.exports = { redirect: () => null };' > /app/node_modules/@clerk/nextjs/dist/cjs/server/redirect.js

# 2. Заглушки для ESM модулей  
RUN mkdir -p /app/node_modules/@clerk/nextjs/dist/esm/server/ && \
    echo 'export function redirect() { return null; }' > /app/node_modules/@clerk/nextjs/dist/esm/server/redirect.js

# 3. Заглушки для shared модулей
RUN echo 'module.exports = { isomorphicAtob: () => "mock", isPublishableKey: () => true, parsePublishableKey: () => ({ clerkJSUrl: "https://clerk.browser.accounts.dev", clerkJSVariant: "clerk-js", clerkJSVersion: "0.0.0-mock", frontendApi: "clerk.mock.accounts.dev", proxyUrl: "", domain: "clerk.accounts.dev", isSatellite: false, instanceType: "production" }) };' > /app/node_modules/@clerk/shared/dist/keys.js

# 4. Заглушка для проблемного chunk-модуля ESM
RUN mkdir -p /app/node_modules/@clerk/shared/dist/ && \
    echo 'export default {}; export const MessageEvent = { prototype: {} };' > /app/node_modules/@clerk/shared/dist/chunk-RSOCGYTF.mjs

# 5. Создаем .env файл с настройками мок-режима
RUN echo "NEXT_PUBLIC_CLERK_MOCK_MODE=true\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=mock_key_not_for_validation\nCLERK_SECRET_KEY=mock_secret_key_not_used" > .env.local

# Запускаем скрипт патчинга для дополнительной обработки
RUN node scripts/prepare-mock-build.js

# Отключаем Clerk полностью во время сборки - сохраняем оригинал и подменяем пустышкой
RUN mv /app/node_modules/@clerk/nextjs/dist/esm/index.js /app/node_modules/@clerk/nextjs/dist/esm/index.js.bak && \
    echo 'export const ClerkProvider = ({children}) => children; export const useUser = () => ({ isLoaded: true, isSignedIn: false, user: null }); export const useClerk = () => ({ signOut: () => {} });' > /app/node_modules/@clerk/nextjs/dist/esm/index.js

# Сборка приложения с использованием скрипта для обычной сборки (patching уже выполнен)
RUN NODE_OPTIONS="--max-old-space-size=4096" npm run build:docker

# Возвращаем оригинал Clerk если был заменен
RUN if [ -f /app/node_modules/@clerk/nextjs/dist/esm/index.js.bak ]; then mv /app/node_modules/@clerk/nextjs/dist/esm/index.js.bak /app/node_modules/@clerk/nextjs/dist/esm/index.js; fi

# Подготовка к выполнению (production образа)
FROM base AS runner
WORKDIR /app

# Настройка для production
ENV NODE_ENV=production
ENV NEXT_PUBLIC_CLERK_MOCK_MODE=true
ENV NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=mock_key_not_for_validation

# Создание пользователя nextjs
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

# Копирование необходимых файлов из этапа сборки
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Настройка порта и команды запуска
EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Запуск сервера
CMD ["node", "server.js"] 