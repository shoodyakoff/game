/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å MongoDB Atlas
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
 * –ó–∞–ø—É—Å–∫: node scripts/sync-db.js
 * –¢—Ä–µ–±—É–µ—Ç—Å—è: MongoDB Tools (mongodump, mongorestore)
 */

const { exec } = require('child_process');
const path = require('path');
const fs = require('fs');
const os = require('os');
require('dotenv').config({ path: '.env.local' });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MongoDB - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
// –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env.sync —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
// –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ .gitignore, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å
const envPath = path.join(__dirname, '../.env.sync');
if (!fs.existsSync(envPath)) {
  console.error('‚ùå –§–∞–π–ª .env.sync –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.error('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.sync —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:');
  console.error('MONGO_ATLAS_URI=mongodb+srv://username:password@cluster...');
  console.error('LOCAL_MONGO_URI=mongodb://localhost:27017/game-portal');
  process.exit(1);
}

require('dotenv').config({ path: envPath });

const ATLAS_URI = process.env.MONGO_ATLAS_URI;
const LOCAL_URI = process.env.LOCAL_MONGO_URI || 'mongodb://localhost:27017/game-portal';
const BACKUP_DIR = path.join(__dirname, '../backup');
const LOG_DIR = path.join(__dirname, '../logs');
const LOG_FILE = path.join(LOG_DIR, 'db_sync.log');

if (!ATLAS_URI) {
  console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω URI –¥–ª—è MongoDB Atlas –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π MONGO_ATLAS_URI!');
  process.exit(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
function createLogDir() {
  if (!fs.existsSync(LOG_DIR)) {
    fs.mkdirSync(LOG_DIR, { recursive: true });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logMessage(message, isError = false) {
  const timestamp = new Date().toISOString();
  const logEntry = `[${timestamp}] ${message}\n`;
  
  console[isError ? 'error' : 'log'](message);
  
  try {
    fs.appendFileSync(LOG_FILE, logEntry);
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: ${err.message}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function checkPrerequisites() {
  return new Promise((resolve, reject) => {
    exec('mongodump --version', (error) => {
      if (error) {
        const errorMsg = '‚ùå MongoDB Tools –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MongoDB Tools:';
        logMessage(errorMsg, true);
        logMessage('   - macOS: brew install mongodb-database-tools', true);
        logMessage('   - Windows: https://www.mongodb.com/try/download/database-tools', true);
        logMessage('   - Linux: sudo apt install mongodb-database-tools', true);
        reject(new Error('MongoDB Tools –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'));
      } else {
        logMessage('‚úÖ MongoDB Tools –Ω–∞–π–¥–µ–Ω—ã');
        resolve();
      }
    });
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞
function createBackupDir() {
  if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
    logMessage(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±—ç–∫–∞–ø–∞: ${BACKUP_DIR}`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Atlas
function exportFromAtlas() {
  return new Promise((resolve, reject) => {
    logMessage('üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB Atlas...');
    
    const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\..+/, '');
    const backupPath = path.join(BACKUP_DIR, `atlas_export_${timestamp}`);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –±—ç–∫–∞–ø–∞
    if (!fs.existsSync(backupPath)) {
      fs.mkdirSync(backupPath, { recursive: true });
    }
    
    exec(`mongodump --uri="${ATLAS_URI}" --out=${backupPath}`, (error, stdout, stderr) => {
      if (error) {
        logMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏–∑ MongoDB Atlas: ${error.message}`, true);
        if (stderr) logMessage(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${stderr}`, true);
        reject(error);
      } else {
        logMessage('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ Atlas');
        if (stdout) logMessage(`–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: ${stdout.trim()}`);
        resolve(backupPath);
      }
    });
  });
}

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
function importToLocal(backupPath) {
  return new Promise((resolve, reject) => {
    logMessage('üîÑ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ URI Atlas
    const dbName = ATLAS_URI.split('/').pop().split('?')[0];
    const dbBackupPath = path.join(backupPath, dbName);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –±—ç–∫–∞–ø–æ–º
    if (!fs.existsSync(dbBackupPath)) {
      logMessage(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${dbBackupPath}`, true);
      reject(new Error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${dbBackupPath}`));
      return;
    }
    
    exec(`mongorestore --uri="${LOCAL_URI}" --drop ${dbBackupPath}`, (error, stdout, stderr) => {
      if (error) {
        logMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é MongoDB: ${error.message}`, true);
        if (stderr) logMessage(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${stderr}`, true);
        reject(error);
      } else {
        logMessage('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î');
        if (stdout) logMessage(`–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: ${stdout.trim()}`);
        resolve();
      }
    });
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
function getSystemInfo() {
  return {
    platform: os.platform(),
    release: os.release(),
    hostname: os.hostname(),
    username: os.userInfo().username,
    date: new Date().toISOString()
  };
}

// –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function writeReport(backupPath, startTime) {
  const endTime = new Date();
  const duration = (endTime - startTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  
  const report = {
    sync_date: endTime.toISOString(),
    duration_seconds: duration,
    source: ATLAS_URI.replace(/\/\/(.+?):.+?@/, '//***:***@'), // –ú–∞—Å–∫–∏—Ä—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    destination: LOCAL_URI.replace(/\/\/(.+?):.+?@/, '//***:***@'),
    backup_path: backupPath,
    system: getSystemInfo()
  };
  
  const reportPath = path.join(backupPath, 'sync_report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  logMessage(`üìã –û—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∞–Ω –≤ ${reportPath}`);
}

// –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async function syncDatabases() {
  const startTime = new Date();
  let backupPath;
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –∏ –±—ç–∫–∞–ø–æ–≤
    createLogDir();
    createBackupDir();
    
    logMessage('üöÄ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö');
    logMessage(`üìå –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${startTime.toISOString()}`);
    logMessage(`üìå –°–∏—Å—Ç–µ–º–∞: ${os.platform()} ${os.release()}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MongoDB
    await checkPrerequisites();
    
    // –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ Atlas
    backupPath = await exportFromAtlas();
    
    // –ò–º–ø–æ—Ä—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
    await importToLocal(backupPath);
    
    // –ó–∞–ø–∏—Å—å –æ—Ç—á–µ—Ç–∞
    writeReport(backupPath, startTime);
    
    logMessage('\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    logMessage('üéÆ Game Portal –≥–æ—Ç–æ–≤ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
    
    process.exit(0);
  } catch (error) {
    logMessage(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, true);
    
    // –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (backupPath) {
      try {
        const errorReport = {
          error: error.message,
          stack: error.stack,
          date: new Date().toISOString(),
          system: getSystemInfo()
        };
        
        const errorReportPath = path.join(backupPath, 'error_report.json');
        fs.writeFileSync(errorReportPath, JSON.stringify(errorReport, null, 2));
        logMessage(`üìã –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∞–Ω –≤ ${errorReportPath}`, true);
      } catch (reportError) {
        logMessage(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ: ${reportError.message}`, true);
      }
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
syncDatabases();