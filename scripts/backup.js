/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫: node scripts/backup.js
 * –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ cron
 */

const { exec } = require('child_process');
const path = require('path');
const fs = require('fs');
const os = require('os');
require('dotenv').config();

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envPath = process.env.NODE_ENV === 'production' 
  ? path.join(__dirname, '../.env.production')
  : path.join(__dirname, '../.env.local');

// –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª
if (fs.existsSync(envPath)) {
  require('dotenv').config({ path: envPath });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
const MONGO_URI = process.env.MONGODB_URI || process.env.MONGO_URI;
const BACKUP_DIR = path.join(__dirname, '../backup');
const LOG_DIR = path.join(__dirname, '../logs');
const LOG_FILE = path.join(LOG_DIR, 'db_backup.log');
const MAX_BACKUPS = parseInt(process.env.MAX_BACKUPS || '7', 10); // —Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 7 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—ç–∫–∞–ø–æ–≤
const ENCRYPT_BACKUP = process.env.ENCRYPT_BACKUP === 'true';
const ENCRYPTION_KEY = process.env.BACKUP_ENCRYPTION_KEY;
const COMPRESS_ONLY = process.env.COMPRESS_ONLY === 'true'; // –ï—Å–ª–∏ true, –Ω–µ —à–∏—Ñ—Ä—É–µ–º, –∞ —Ç–æ–ª—å–∫–æ —Å–∂–∏–º–∞–µ–º

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
function createLogDir() {
  if (!fs.existsSync(LOG_DIR)) {
    fs.mkdirSync(LOG_DIR, { recursive: true });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logMessage(message, isError = false) {
  const timestamp = new Date().toISOString();
  const logEntry = `[${timestamp}] ${message}\n`;
  
  console[isError ? 'error' : 'log'](message);
  
  try {
    fs.appendFileSync(LOG_FILE, logEntry);
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: ${err.message}`);
  }
}

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
createLogDir();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
if (!MONGO_URI) {
  logMessage('‚ùå –û—à–∏–±–∫–∞: –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MongoDB –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è', true);
  logMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ MONGODB_URI –∏–ª–∏ MONGO_URI', true);
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
if (!fs.existsSync(BACKUP_DIR)) {
  fs.mkdirSync(BACKUP_DIR, { recursive: true });
  logMessage(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±—ç–∫–∞–ø–æ–≤: ${BACKUP_DIR}`);
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
const date = new Date();
const timestamp = date.toISOString().replace(/:/g, '-').replace(/\..+/, '');
const backupName = `backup-${timestamp}`;
const backupPath = path.join(BACKUP_DIR, backupName);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function getDirSize(directory) {
  let size = 0;
  
  try {
    const files = fs.readdirSync(directory);
    
    for (const file of files) {
      const filePath = path.join(directory, file);
      const stats = fs.statSync(filePath);
      
      if (stats.isFile()) {
        size += stats.size;
      } else if (stats.isDirectory()) {
        size += getDirSize(filePath);
      }
    }
  } catch (error) {
    logMessage(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${directory}: ${error.message}`, true);
  }
  
  return size;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
function formatSize(bytes) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö)
function rotateBackups() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –±—ç–∫–∞–ø–∞–º–∏
    const backupDirs = fs.readdirSync(BACKUP_DIR)
      .filter(file => file.startsWith('backup-') && 
        fs.statSync(path.join(BACKUP_DIR, file)).isDirectory());
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    backupDirs.sort((a, b) => {
      return fs.statSync(path.join(BACKUP_DIR, a)).mtime.getTime() - 
             fs.statSync(path.join(BACKUP_DIR, b)).mtime.getTime();
    });
    
    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç MAX_BACKUPS, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
    if (backupDirs.length > MAX_BACKUPS) {
      const dirsToDelete = backupDirs.slice(0, backupDirs.length - MAX_BACKUPS);
      
      dirsToDelete.forEach(dir => {
        const dirPath = path.join(BACKUP_DIR, dir);
        const size = getDirSize(dirPath);
        
        fs.rmSync(dirPath, { recursive: true, force: true });
        logMessage(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: ${dir} (${formatSize(size)})`);
      });
      
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±—ç–∫–∞–ø–∞—Ö
      logMessage(`üìä –û—Å—Ç–∞–ª–æ—Å—å –±—ç–∫–∞–ø–æ–≤: ${backupDirs.length - dirsToDelete.length} –∏–∑ ${MAX_BACKUPS} –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö`);
    }
  } catch (error) {
    logMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –±—ç–∫–∞–ø–æ–≤: ${error.message}`, true);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
function compressBackup(backupPath) {
  return new Promise((resolve, reject) => {
    const archivePath = `${backupPath}.tar.gz`;
    logMessage(`üîÑ –°–∂–∞—Ç–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...`);
    
    // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    exec(`tar -czf ${archivePath} -C ${BACKUP_DIR} ${backupName}`, (error) => {
      if (error) {
        logMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –±—ç–∫–∞–ø–∞: ${error.message}`, true);
        reject(error);
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
      const stats = fs.statSync(archivePath);
      
      // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      fs.rmSync(backupPath, { recursive: true, force: true });
      
      logMessage(`‚úÖ –ë—ç–∫–∞–ø —Å–∂–∞—Ç: ${archivePath} (${formatSize(stats.size)})`);
      resolve(archivePath);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
function encryptBackup(backupPath) {
  if (COMPRESS_ONLY) {
    return compressBackup(backupPath);
  }
  
  if (!ENCRYPT_BACKUP || !ENCRYPTION_KEY) {
    return Promise.resolve(backupPath);
  }
  
  return new Promise((resolve, reject) => {
    const archivePath = `${backupPath}.tar.gz`;
    logMessage(`üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—é –±—ç–∫–∞–ø–∞...`);
    
    // –°–Ω–∞—á–∞–ª–∞ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    exec(`tar -czf ${archivePath} -C ${BACKUP_DIR} ${backupName}`, (error) => {
      if (error) {
        logMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –±—ç–∫–∞–ø–∞: ${error.message}`, true);
        reject(error);
        return;
      }
      
      logMessage(`üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...`);
      
      // –ó–∞—Ç–µ–º —à–∏—Ñ—Ä—É–µ–º –∞—Ä—Ö–∏–≤
      exec(`openssl enc -aes-256-cbc -salt -in ${archivePath} -out ${archivePath}.enc -k "${ENCRYPTION_KEY}"`, (error) => {
        if (error) {
          logMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: ${error.message}`, true);
          reject(error);
          return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
        const stats = fs.statSync(`${archivePath}.enc`);
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
        fs.unlinkSync(archivePath);
        
        // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        fs.rmSync(backupPath, { recursive: true, force: true });
        
        logMessage(`üîí –ë—ç–∫–∞–ø –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω: ${archivePath}.enc (${formatSize(stats.size)})`);
        resolve(`${archivePath}.enc`);
      });
    });
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
function getSystemInfo() {
  return {
    platform: os.platform(),
    release: os.release(),
    hostname: os.hostname(),
    username: os.userInfo().username,
    date: new Date().toISOString()
  };
}

// –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—ç–∫–∞–ø–µ
function writeReport(backupPath, startTime, finalPath) {
  const endTime = new Date();
  const duration = (endTime - startTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  
  const report = {
    backup_date: endTime.toISOString(),
    duration_seconds: duration,
    source: MONGO_URI.replace(/\/\/(.+?):.+?@/, '//***:***@'), // –ú–∞—Å–∫–∏—Ä—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    backup_path: finalPath,
    encrypted: ENCRYPT_BACKUP && !COMPRESS_ONLY,
    compressed: true,
    retention_policy: {
      max_backups: MAX_BACKUPS
    },
    system: getSystemInfo()
  };
  
  // –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å - —ç—Ç–æ —Ñ–∞–π–ª, —Ç–æ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞
  let reportDir = path.dirname(finalPath);
  let reportPath = path.join(reportDir, 'backup_report.json');
  
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  logMessage(`üìã –û—Ç—á–µ—Ç –æ –±—ç–∫–∞–ø–µ –∑–∞–ø–∏—Å–∞–Ω –≤ ${reportPath}`);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
const startTime = new Date();
logMessage(`üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ ${backupPath}...`);
logMessage(`üìå –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${startTime.toISOString()}`);
logMessage(`üìå –°–∏—Å—Ç–µ–º–∞: ${os.platform()} ${os.release()}`);
logMessage(`üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏: MAX_BACKUPS=${MAX_BACKUPS}, ENCRYPT=${ENCRYPT_BACKUP}, COMPRESS_ONLY=${COMPRESS_ONLY}`);

// –í—ã–ø–æ–ª–Ω—è–µ–º mongodump
exec(`mongodump --uri="${MONGO_URI}" --out=${backupPath}`, async (error, stdout, stderr) => {
  if (error) {
    logMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error.message}`, true);
    if (stderr) logMessage(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${stderr}`, true);
    process.exit(1);
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–∞
  const backupSize = getDirSize(backupPath);
  
  logMessage(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤: ${backupPath} (${formatSize(backupSize)})`);
  
  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—ç–∫–∞–ø (—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–∂–∞—Ç–∏–µ)
    let finalPath = backupPath;
    
    if (ENCRYPT_BACKUP && ENCRYPTION_KEY) {
      finalPath = await encryptBackup(backupPath);
    } else if (COMPRESS_ONLY) {
      finalPath = await compressBackup(backupPath);
    }
    
    // –ó–∞–ø–∏—Å—å –æ—Ç—á–µ—Ç–∞
    writeReport(backupPath, startTime, finalPath);
    
    // –†–æ—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
    rotateBackups();
    
    const endTime = new Date();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    
    logMessage(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration} —Å–µ–∫.`);
  } catch (error) {
    logMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error.message}`, true);
  }
}); 