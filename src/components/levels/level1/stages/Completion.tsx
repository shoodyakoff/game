import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { Button } from '../../../../components/common/ui/Button';
import { Card } from '../../../../components/common/ui/Card';
import { Badge } from '../../../../components/common/Badge';
import { CharacterItem } from '../../../../components/common/CharacterItem';
import { useCharacter } from '../../../../hooks/useCharacter';
import { useLevelProgress } from '../../../../hooks/useLevelProgress';
import styles from './Completion.module.css';

interface CompletionProps {
  onComplete: () => void;
}

interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
}

interface LearningResource {
  title: string;
  description: string;
  url: string;
  type: 'article' | 'video' | 'book';
}

interface Reward {
  id: string;
  title: string;
  description: string;
  icon: string;
  type: 'item' | 'badge' | 'achievement';
}

const LEVEL1_ACHIEVEMENTS: Achievement[] = [
  {
    id: 'product_thinker',
    title: '–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º—ã—Å–ª–∏—Ç–µ–ª—å',
    description: '–û—Å–≤–æ–∏–ª–∏ –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è',
    icon: 'üß†'
  },
  {
    id: 'ux_master',
    title: 'UX-–º–∞—Å—Ç–µ—Ä',
    description: '–ù–∞—É—á–∏–ª–∏—Å—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç',
    icon: 'üë•'
  },
  {
    id: 'metrics_guru',
    title: '–ì—É—Ä—É –º–µ—Ç—Ä–∏–∫',
    description: '–û—Å–≤–æ–∏–ª–∏ —Ä–∞–±–æ—Ç—É —Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏',
    icon: 'üìä'
  },
  {
    id: 'decision_maker',
    title: '–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ä–µ—à–µ–Ω–∏—è',
    description: '–ù–∞—É—á–∏–ª–∏—Å—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è',
    icon: '‚öñÔ∏è'
  }
];

const LEVEL1_RESOURCES: LearningResource[] = [
  {
    title: '–ü—Ä–æ–¥—É–∫—Ç–æ–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
    description: '–°—Ç–∞—Ç—å—è –æ —Ç–æ–º, –∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
    url: 'https://example.com/product-thinking',
    type: 'article'
  },
  {
    title: 'UX-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
    description: '–í–∏–¥–µ–æ –æ –º–µ—Ç–æ–¥–∞—Ö UX-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
    url: 'https://example.com/ux-research',
    type: 'video'
  },
  {
    title: '–ú–µ—Ç—Ä–∏–∫–∏ –≤ –ø—Ä–æ–¥—É–∫—Ç–µ',
    description: '–ö–Ω–∏–≥–∞ –æ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö –≤ –ø—Ä–æ–¥—É–∫—Ç–µ',
    url: 'https://example.com/product-metrics',
    type: 'book'
  },
  {
    title: '–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π',
    description: '–°—Ç–∞—Ç—å—è –æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞—Ö –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π',
    url: 'https://example.com/decision-making',
    type: 'article'
  }
];

const LEVEL1_REWARDS: Reward[] = [
  {
    id: 'product_hat',
    title: '–®–ª—è–ø–∞ –ø—Ä–æ–¥–∞–∫—Ç–∞',
    description: '–°—Ç–∏–ª—å–Ω–∞—è —à–ª—è–ø–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞',
    icon: 'üé©',
    type: 'item'
  },
  {
    id: 'ux_glasses',
    title: '–û—á–∫–∏ UX-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è',
    description: '–ü–æ–º–æ–≥–∞—é—Ç –ª—É—á—à–µ –≤–∏–¥–µ—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    icon: 'üëì',
    type: 'item'
  },
  {
    id: 'metrics_watch',
    title: '–ß–∞—Å—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
    description: '–ü–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤—Ä–µ–º—è –∏ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏',
    icon: '‚åö',
    type: 'item'
  },
  {
    id: 'decision_compass',
    title: '–ö–æ–º–ø–∞—Å —Ä–µ—à–µ–Ω–∏–π',
    description: '–£–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Ç—å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º',
    icon: 'üß≠',
    type: 'item'
  }
];

export const Completion: React.FC<CompletionProps> = ({ onComplete }) => {
  const router = useRouter();
  const { character, addItem } = useCharacter();
  const { progress, addAchievement } = useLevelProgress();
  const [currentSection, setCurrentSection] = useState<'achievements' | 'rewards' | 'resources'>('achievements');

  useEffect(() => {
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
    LEVEL1_ACHIEVEMENTS.forEach(achievement => {
      addAchievement(achievement.id);
    });

    LEVEL1_REWARDS.forEach(reward => {
      if (reward.type === 'item') {
        addItem(reward.id);
      }
    });
  }, [addAchievement, addItem]);

  const handleReturnToLevels = () => {
    router.push('/levels');
  };

  const renderContent = () => {
    switch (currentSection) {
      case 'achievements':
        return (
          <div className={styles.achievements}>
            {LEVEL1_ACHIEVEMENTS.map((achievement) => (
              <Card key={achievement.id} className={styles.achievementCard}>
                <div className={styles.achievementIcon}>{achievement.icon}</div>
                <h3>{achievement.title}</h3>
                <p>{achievement.description}</p>
              </Card>
            ))}
          </div>
        );
      case 'rewards':
        return (
          <div className={styles.rewards}>
            {LEVEL1_REWARDS.map((reward) => (
              <Card key={reward.id} className={styles.rewardCard}>
                <div className={styles.rewardIcon}>{reward.icon}</div>
                <h3>{reward.title}</h3>
                <p>{reward.description}</p>
              </Card>
            ))}
          </div>
        );
      case 'resources':
        return (
          <div className={styles.resources}>
            {LEVEL1_RESOURCES.map((resource, index) => (
              <Card key={index} className={styles.resourceCard}>
                <div className={styles.resourceIcon}>
                  {resource.type === 'article' ? 'üìÑ' : resource.type === 'video' ? 'üé•' : 'üìö'}
                </div>
                <h3>{resource.title}</h3>
                <p>{resource.description}</p>
                <a href={resource.url} target="_blank" rel="noopener noreferrer">
                  –û—Ç–∫—Ä—ã—Ç—å
                </a>
              </Card>
            ))}
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className={styles.completion}>
      <div className={styles.container}>
        <h1 className={styles.title}>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h1>
        <p className={styles.subtitle}>
          –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ –æ—Å–≤–æ–∏–ª–∏ –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è!
        </p>

        <div className={styles.stats}>
          <div className={styles.statItem}>
            <span className={styles.statValue}>100%</span>
            <span className={styles.statLabel}>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
          </div>
          <div className={styles.statItem}>
            <span className={styles.statValue}>{LEVEL1_ACHIEVEMENTS.length}</span>
            <span className={styles.statLabel}>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</span>
          </div>
          <div className={styles.statItem}>
            <span className={styles.statValue}>{LEVEL1_REWARDS.length}</span>
            <span className={styles.statLabel}>–ù–∞–≥—Ä–∞–¥—ã</span>
          </div>
        </div>

        <div className={styles.tabs}>
          <Button
            variant={currentSection === 'achievements' ? 'primary' : 'secondary'}
            onClick={() => setCurrentSection('achievements')}
          >
            –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
          </Button>
          <Button
            variant={currentSection === 'rewards' ? 'primary' : 'secondary'}
            onClick={() => setCurrentSection('rewards')}
          >
            –ù–∞–≥—Ä–∞–¥—ã
          </Button>
          <Button
            variant={currentSection === 'resources' ? 'primary' : 'secondary'}
            onClick={() => setCurrentSection('resources')}
          >
            –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
          </Button>
        </div>

        <div className={styles.content}>
          {renderContent()}
        </div>

        <div className={styles.actions}>
          <Button onClick={handleReturnToLevels} variant="primary">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω–µ–π
          </Button>
        </div>
      </div>
    </div>
  );
}; 