#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ –º–æ–∫-—Ä–µ–∂–∏–º–µ

set -e  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."

# –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
echo "üì• –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
git fetch
git pull origin main

# –®–∞–≥ 2: –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
echo "üîê –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏..."
chmod +x patch-clerk-modules.sh
chmod +x setup-mock-server.sh

# –®–∞–≥ 3: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose -f docker-compose.prod.yml down

# –®–∞–≥ 4: –û—á–∏—â–∞–µ–º Docker
echo "üßπ –û—á–∏—â–∞–µ–º Docker..."
docker system prune -af

# –®–∞–≥ 5: –ü–∞—Ç—á–∏–º –º–æ–¥—É–ª–∏ Clerk
echo "ü©π –ü–∞—Ç—á–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏ Clerk..."
npm ci

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–¥—É–ª–µ–π Clerk, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
mkdir -p ./node_modules/@clerk/shared/dist

# –ü–∞—Ç—á–∏–º keys.js –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å atob
echo "export function isomorphicAtob(str) { return 'patched'; }
export function isPublishableKey() { return true; }
export function parsePublishableKey() { return { frontendApi: 'clerk.example.com', instanceType: 'test' }; }" > ./node_modules/@clerk/shared/dist/keys.js

echo "‚úÖ –ú–æ–¥—É–ª–∏ Clerk —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω—ã!"

# –®–∞–≥ 6: –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env.local —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
echo "üîß –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env.local..."
cat > .env.local << EOL
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_JA==
CLERK_SECRET_KEY=sk_test_valid_key
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/character/select
NEXT_PUBLIC_CLERK_MOCK_MODE=true
NEXT_PUBLIC_CLERK_NO_VERIFICATION=true
EOL
echo "‚úÖ –§–∞–π–ª .env.local —Å–æ–∑–¥–∞–Ω!"

# –®–∞–≥ 7: –°–æ–∑–¥–∞–µ–º docker-compose.override.yml —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—ã
echo "üê≥ –°–æ–∑–¥–∞–µ–º docker-compose.override.yml..."
cat > docker-compose.override.yml << EOL
version: '3'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.minimal
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_JA==
      - CLERK_SECRET_KEY=sk_test_valid_key
      - NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
      - NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
      - NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard
      - NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/character/select
      - NEXT_PUBLIC_CLERK_MOCK_MODE=true
      - NEXT_PUBLIC_CLERK_NO_VERIFICATION=true
    volumes:
      - ./.env.local:/app/.env.local
EOL
echo "‚úÖ –§–∞–π–ª docker-compose.override.yml —Å–æ–∑–¥–∞–Ω!"

# –®–∞–≥ 8: –°—Ç—Ä–æ–∏–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üöÄ –°—Ç—Ä–æ–∏–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose -f docker-compose.prod.yml up -d --build

# –®–∞–≥ 9: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.prod.yml ps

echo "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! 
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:3000

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
docker-compose -f docker-compose.prod.yml logs -f app"

echo "=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ==="
echo "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://<IP-—Å–µ—Ä–≤–µ—Ä–∞>:3000"
echo "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: docker-compose -f docker-compose.prod.yml logs -f"
echo "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–æ–≥–æ–≤ —Å–µ–π—á–∞—Å –≤–≤–µ–¥–∏—Ç–µ 'y' (–∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
read answer
if [[ "$answer" == "y" || "$answer" == "Y" ]]; then
  docker-compose -f docker-compose.prod.yml logs -f
fi 